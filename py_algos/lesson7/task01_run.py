"""
1). Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами
на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
"""
import random


def reversed_bubble_sort(arr):
    n = len(arr)
    for i in range(1, n):
        sorted_ = True

        for k in range(0, n - i):  # i элементов уже отсортированы, можно до них не идти
            if arr[k] < arr[k + 1]:
                arr[k], arr[k + 1] = arr[k + 1], arr[k]
                sorted_ = False
        if sorted_:  # если свопов не было, завершаю сортировку
            return arr
    return arr  # без этой строки возвращает None, когда наибольшее значение на последнем месте


rndm_arr = [random.randint(-100, 100) for _ in range(10)]
start_arr = rndm_arr[:]
print(f'изначальный массив:\n{start_arr}')
print(f'отсортированный массив:\n{reversed_bubble_sort(rndm_arr)}')


"""
Проверка timeit-oм улучшений
print(timeit.timeit('reversed_bubble_sort(rndm_arr)', number=10000, globals=globals()))

начальная версия:
0.09227271300005668
0.08751122700004998
0.08738923200007775
0.08803192200002741

второй цикл до n - i:
0.06161039599965079
0.06194085000015548
0.059779737000098976
0.058927152000251226

c проверкой свопов:
0.013644330999795784
0.012285537000025215
0.01227419099996041
0.012458350000088103

"""
